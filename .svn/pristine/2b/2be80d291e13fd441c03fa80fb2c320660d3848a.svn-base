package br.com.simdata.forcavendas.view;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONArray;

import br.com.simdata.forcavendas.R;
import br.com.simdata.forcavendas.dao.ClienteDAO;
import br.com.simdata.forcavendas.dao.ContaReceberDAO;
import br.com.simdata.forcavendas.dao.EmpresaDAO;
import br.com.simdata.forcavendas.dao.FormaPagamentoDAO;
import br.com.simdata.forcavendas.dao.GenericDAO;
import br.com.simdata.forcavendas.dao.PedidoDAO;
import br.com.simdata.forcavendas.dao.PrazoPagamentoDAO;
import br.com.simdata.forcavendas.dao.ProdutoDAO;
import br.com.simdata.forcavendas.dao.ProdutoEstoqueDAO;
import br.com.simdata.forcavendas.dao.ProdutoPrecoDAO;
import br.com.simdata.forcavendas.model.AuditLog;
import br.com.simdata.forcavendas.model.Empresa;
import br.com.simdata.forcavendas.model.cadastro.Cliente;
import br.com.simdata.forcavendas.model.cadastro.ContaReceber;
import br.com.simdata.forcavendas.model.cadastro.Produto;
import br.com.simdata.forcavendas.model.cadastro.ProdutoEstoque;
import br.com.simdata.forcavendas.model.cadastro.ProdutoPreco;
import br.com.simdata.forcavendas.model.venda.FormaPagamento;
import br.com.simdata.forcavendas.model.venda.Pedido;
import br.com.simdata.forcavendas.model.venda.PedidoItem;
import br.com.simdata.forcavendas.model.venda.PrazoPagamento;
import br.com.simdata.forcavendas.util.DataUtils;
import br.com.simdata.forcavendas.util.TesteConexao;
import android.os.AsyncTask;
import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.View;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.TextView;

public class FormSincronizacaoActivity extends Activity {

	private Button btn_sincronizar_dados, btn_sincronizar_dados_voltar;
	private TextView edit_form_sincronizacao_status;
	private RadioButton radio_externo, radio_interno;
	private int at_pedidos_enviados, at_pedidos_situacao, at_produtos, at_produtos_precos, at_clientes, at_clientes_ctr, at_formapag, at_prazopag, at_registros;

	private EmpresaDAO empresaDAO = new EmpresaDAO(this);
	private ProdutoDAO produtoDAO = new ProdutoDAO(this);
	private ClienteDAO clienteDAO = new ClienteDAO(this);
	private ContaReceberDAO contaReceberDAO = new ContaReceberDAO(this);
	private ProdutoPrecoDAO produtoPrecoDAO = new ProdutoPrecoDAO(this);
	private ProdutoEstoqueDAO produtoEstoqueDAO = new ProdutoEstoqueDAO(this);
	private FormaPagamentoDAO formaPagamentoDAO = new FormaPagamentoDAO(this);
	private PrazoPagamentoDAO prazoPagamentoDAO = new PrazoPagamentoDAO(this);
	private PedidoDAO pedidoDAO = new PedidoDAO(this);
	private GenericDAO genericDAO = new GenericDAO(this);

	private Context context = this;
	
	private String dataAtual;
	private long id_empresa;
	private long id_empresa_erp;
	private long id_vendedor;
	private String usuario;
	private String senha;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.form_sincronizacao);
		edit_form_sincronizacao_status = (TextView) findViewById(R.id.edit_form_sincronizacao_status);
		btn_sincronizar_dados = (Button) findViewById(R.id.btn_sincronizar_dados);
		btn_sincronizar_dados_voltar = (Button) findViewById(R.id.btn_sincronizar_dados_voltar);
		radio_externo = (RadioButton) findViewById(R.id.radio_externo);
		radio_interno = (RadioButton) findViewById(R.id.radio_interno);
		
		empresaDAO.open();
		List<Empresa> empresas = empresaDAO.ListAll();
		if (empresas.size() == 1) {
			DadosSessao.setEmpresa(empresas.get(0));
		}
		empresaDAO.close();
		
		btn_sincronizar_dados.setOnClickListener(new View.OnClickListener() {// Botao Sincronizar
			public void onClick(View v) {
				if (radio_interno.isChecked()) {// Sincronizacao Interna (Ex.: http://192.168.0.55:8080/SimDataFVWebService/fvservices)
					new SincronizacaoTask().execute("http://" + DadosSessao.getEmpresa().getHost_interno() +"/fvservices");
				} else if (radio_externo.isChecked()) {// Sincronizacao Externa
					new SincronizacaoTask().execute("http://" + DadosSessao.getEmpresa().getHost_externo() +"/fvservices");
				}
			}
		});

		btn_sincronizar_dados_voltar.setOnClickListener(new View.OnClickListener() {// Botao voltar
			public void onClick(View v) {
				Intent myIntent = new Intent(FormSincronizacaoActivity.this,MainActivity.class);
				startActivity(myIntent);
				finish();
				return;
			}
		});

		id_empresa = DadosSessao.getEmpresa().getId_empresa();
		id_empresa_erp = DadosSessao.getEmpresa().getId_empresa_erp();
		id_vendedor = DadosSessao.getEmpresa().getV_codigo();
		usuario = DadosSessao.getEmpresa().getV_usuario();
		senha = DadosSessao.getEmpresa().getV_senha();
	}
	
	@Override
    public void onBackPressed() {//Botao de voltar do android
        AlertDialog.Builder builder = new AlertDialog.Builder(this);   	 
    	builder.setTitle("SimData");
    	builder.setMessage("Você tem certeza que deseja sair do sistema?");
    	     	 
    	builder.setPositiveButton("Sim", new DialogInterface.OnClickListener() {    	
    	    public void onClick(DialogInterface dialog, int which) {// Code that is executed when clicking YES    	        
    	        dialog.dismiss();//Fecha dialog
    	        sair();//Sai do app
    	    }    	 
    	});    	     	 
    	builder.setNegativeButton("Não", new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog, int which) {// Code that is executed when clicking NO
    			dialog.dismiss();//Fecha dialog
    	    }    	 
    	});
        
        AlertDialog alert = builder.create();
    	alert.show();//Mostra dialog        
    }
	
	public void sair(){//Sai do aplicativo
		super.onBackPressed();//Executa metodo nativo do botao voltar do android
	}

	/**
	 * Rotina executa a atualizacao dentro de uma AsyncTask
	 * 
	 * @author rafael
	 */
	private class SincronizacaoTask extends AsyncTask<String, Integer, String> {

		private ProgressDialog Dialog = new ProgressDialog(FormSincronizacaoActivity.this);
		List<Exception> exceptions = new ArrayList<Exception>();

		protected void onPreExecute() {
			Dialog.setTitle("Sincronizando...");
			Dialog.setMessage("Sincronizando Aguarde...");
			Dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
			Dialog.setProgress(0);
			Dialog.setMax(100);
			Dialog.show();
		}

		protected String doInBackground(String... urls) {

			empresaDAO.open();
			dataAtual = empresaDAO.getDataAtualByEmpresa(DadosSessao.getEmpresa().getId_empresa()).replaceAll(" ", "%20");// remove os espacos em branco
			empresaDAO.close();

			try {
				if(!TesteConexao.isConectado(context)){//Verifica se aparelho tem internet disponivel
					throw new Exception("O seu aparelho não esta conectado em nenhuma rede, verifique se sua conexão com a internet esta ativa!");
				}
				
				verificaAutenticado(urls[0]);
				
				publishProgress(1);
				enviaPedidos(urls[0]);
				
				publishProgress(2);
				atualizaPedidos(urls[0]);
				
				publishProgress(3);
				atualizaEmpresa(urls[0]);
				
				publishProgress(4);
				atualizaClientes(urls[0]);
				
				publishProgress(5);
				atualizaContaReceber(urls[0]);
				
				publishProgress(6);
				atualizaProdutos(urls[0]);
				
				publishProgress(7);
				atualizaPrecosProdutos(urls[0]);
				
				publishProgress(8);
				atualizaEstoqueProdutos(urls[0]);
				
				publishProgress(9);
				atualizaFormaPagamentos(urls[0]);
				
				publishProgress(10);
				atualizaPrazoPagamentos(urls[0]);
				
				publishProgress(11);
				atualizaRegistros(urls[0]);				
				
			} catch (Exception e) {
				exceptions.add(e);
			}

			return "FIM";
		}

		protected void onProgressUpdate(Integer... progress) {
			Dialog.incrementProgressBy(9);
			if (progress[0] == 1) {
				Dialog.setMessage("Enviando Pedidos");
			} else if (progress[0] == 2) {
				Dialog.setMessage("Atualizando Pedidos");
			} else if (progress[0] == 3) {
				Dialog.setMessage("Atualizando Empresa");
			} else if (progress[0] == 4) {
				Dialog.setMessage("Atualizando Clientes");
			} else if (progress[0] == 5) {
				Dialog.setMessage("Atualizando Contas a Receber");
			} else if (progress[0] == 6) {
				Dialog.setMessage("Atualizando Produtos");
			} else if (progress[0] == 7) {
				Dialog.setMessage("Atualizando Preços");
			} else if (progress[0] == 8) {
				Dialog.setMessage("Atualizando Estoque");
			} else if (progress[0] == 9) {
				Dialog.setMessage("Atualizando Formas de Pagtos");
			} else if (progress[0] == 10) {
				Dialog.setMessage("Atualizando Prazo de Pagtos");
			} else if (progress[0] == 11) {
				Dialog.setMessage("Limpando...");
			}
		}

		protected void onPostExecute(String result) {

			String resultado = "";

			if (exceptions.size() > 0) {
				resultado += "Erro na sincronização, contate o suporte!";
				for (Exception e : exceptions) {
					resultado += " \n\n " + e.getMessage();// Apresenta erros na tela
				}
			} else {
				empresaDAO.open();
				empresaDAO.updateDataAtual(DadosSessao.getEmpresa().getId_empresa());// atualiza o data de atualizacao no cadastro da empresa
				empresaDAO.close();

				// Apresenta na tela
				resultado = "Pedidos Enviados: " + at_pedidos_enviados + "\n\n";
				resultado += "Pedidos Atualizados: " + at_pedidos_situacao + "\n";
				resultado += "Produtos Atualizados: " + at_produtos + "\n";
				resultado += "Preços Atualizados: " + at_produtos_precos + "\n";
				resultado += "Clientes Atualizados: " + at_clientes + "\n";
				resultado += "Títulos em Aberto Atualizados: " + at_clientes_ctr + "\n";
				resultado += "Forma Pagtos. Atualizadas: " + at_formapag + "\n";
				resultado += "Prazo Pagtos. Atualizados: " + at_prazopag + "\n";
				resultado += "Registros excluídos: " + at_registros + "\n";

				at_pedidos_enviados = 0;
				at_pedidos_situacao = 0;
				at_produtos = 0;
				at_produtos_precos = 0;
				at_clientes = 0;
				at_clientes_ctr = 0;
				at_formapag = 0;
				at_prazopag = 0;
				at_registros = 0;
			}

			edit_form_sincronizacao_status.setText(resultado);

			Dialog.dismiss();
		}
	}

	/**
	 * Realiza a leitura do JSON do webservice
	 * 
	 * @param URL
	 * @return
	 */
	public String readJSON(String URL) throws Exception {
		StringBuilder stringBuilder = new StringBuilder();
		HttpClient httpClient = new DefaultHttpClient();
		HttpGet httpGet = new HttpGet(URL);

		HttpResponse response = httpClient.execute(httpGet);
		StatusLine statusLine = response.getStatusLine();
		int statusCode = statusLine.getStatusCode();
		if (statusCode == 200) {
			HttpEntity entity = response.getEntity();
			InputStream inputStream = entity.getContent();
			BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
			String line;
			while ((line = reader.readLine()) != null) {
				stringBuilder.append(line);
			}
			inputStream.close();
		} else {
			throw new Exception("Erro ao baixar/ler informações!");
		}

		return stringBuilder.toString();
	}

	/**
	 * Envia JSONArray para o webservice
	 * 
	 * @param URL (endereco do webservice)
	 * @return result (resposta do web service)
	 * @throws Exception
	 * @throws IOException
	 */
	public String sendJSONPOST(String URL, List<Object> objects) throws Exception {
		String respostaWebService = "";// Resposta do webservice
		HttpClient httpclient = new DefaultHttpClient();// Cria HttpClient
		HttpPost httpPost = new HttpPost(URL);// Faz solicitação POST para a URL

		// Coloca todos os objetos em um jsonObjectArray
		JSONArray JSONArray = new JSONArray();
		for (Object object : objects) {
			JSONArray.put(object);
		}

		String stringJsonArray = JSONArray.toString();// Converte jsonObjectArray para uma string Json
		StringEntity stringEntity = new StringEntity(stringJsonArray);// Seta a string Json para uma StringEntity
		httpPost.setEntity(stringEntity);// Seta StringEntity para o httpPost
		HttpResponse httpResponse = httpclient.execute(httpPost);// Executar solicitação POST para a URL !!EXECUTA/ENVIA!!
		
		if(httpResponse.getStatusLine().getStatusCode() == 200){//200 OK 
			InputStream inputStream = httpResponse.getEntity().getContent();// Recebe a resposta em um inputStream
			respostaWebService = convertInputStreamToString(inputStream).trim();// Converte resposta do webservice para string			
		}else if(httpResponse.getStatusLine().getStatusCode() == 304){//304 Not Modified
			
		}else if(httpResponse.getStatusLine().getStatusCode() == 500){//500 Internal Server Error
			throw new Exception(convertInputStreamToString(httpResponse.getEntity().getContent()).trim());//Deu Erro;
		}
		
		return respostaWebService;
	}

	/**
	 * Converte InputStream (response do webservice) para string
	 * 
	 * @param inputStream
	 * @return String
	 * @throws IOException
	 */
	private static String convertInputStreamToString(InputStream inputStream) throws IOException {
		StringBuilder inputStringBuilder = new StringBuilder();
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
		String line = bufferedReader.readLine();
		while (line != null) {
			inputStringBuilder.append(line);
			inputStringBuilder.append('\n');
			line = bufferedReader.readLine();
		}
		return inputStringBuilder.toString();
	}

	
	/**
	 * Verifica se representante esta autenticado (usuario e senhas corretas e se esta liberado para utilizar o sistema)
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void verificaAutenticado(String url) throws Exception {		
		String autenticarJSON = readJSON(url + "/autenticar/" + id_empresa_erp + "/" + id_vendedor + "/" + usuario + "/" + senha);
		
		if (!autenticarJSON.equals("")) {
			throw new Exception("Representante não autenticado!");						
		}
	}
	
	/**
	 * Envia os pedidos com situacao L-liberado para o webservice
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void enviaPedidos(String url) throws Exception {
		pedidoDAO.open();
		List<Pedido> pedidos = pedidoDAO.ListPedidosSituação('L');// Lista pedidos liberados
		if (pedidos != null && pedidos.size() > 0) {			
			sendJSONPOST(url + "/pedido/enviar/" + id_empresa_erp + "/" + id_vendedor, pedidosToListJSONObject(pedidos));						
			for (Pedido pedido : pedidos) {
				pedido.setSituacao("T");// Passa pedido para T-Transmitido
				pedido.setDt_transmissao(new Date());//Coloca a data da transmissao
				pedidoDAO.update(pedido);// Salva
				at_pedidos_enviados++;
			}	
		}
		pedidoDAO.close();
	}

	/**
	 * Verifica situacao dos pedidos com situacao T-Transmitido e conforme resposta do 
	 * webservice atualiza para E-Emitido
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaPedidos(String url) throws Exception {		
		pedidoDAO.open();
		List<Pedido> pedidos = pedidoDAO.ListPedidosSituação('T');// Lista pedidos com situacao transmitido
		if (pedidos != null && pedidos.size() > 0) {	
			for (Pedido pedido : pedidos) {
				List<Object> objects = new ArrayList<Object>();//Cria lista de objets para serem passados para o webservice
				JSONObject jsonObject = new JSONObject();// Cria novo jsonObject para armazenar o pedido
				jsonObject.put("numero", pedido.getNumero());//Armazena o numero do pedido
				objects.add(jsonObject);//Adiciona o jsonObject para uma lista de Objects
				
				String respostaWebService = sendJSONPOST(url + "/pedido/situacao/" + id_empresa_erp + "/" + id_vendedor, objects);//Envia para o webservice para verificacao
				
				if(!respostaWebService.equals("")){
					pedido.setSituacao("E");// Passa pedido para E-Emitido
					pedido.setDt_emissao(DataUtils.getDateBd(respostaWebService));// Coloca data de emissao
					pedidoDAO.update(pedido);// Salva
					at_pedidos_situacao++;
				}
				
			}		
		}		
		pedidoDAO.close();		
	}

	/**
	 * Atualiza informacoes da empresa
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaEmpresa(String url) throws Exception {		
		String empresaJSON = readJSON(url + "/empresa/info/" + id_empresa_erp + "/" + id_vendedor);					
		empresaDAO.open();		
		JSONObject jsonObject = new JSONObject(empresaJSON);
		Empresa empresa = empresaDAO.getByid(DadosSessao.getEmpresa().getId_empresa());
		empresa.setNome(jsonObject.getString("nome"));
		empresa.setRazao(jsonObject.getString("razao"));
		empresa.setCnpj(jsonObject.getString("cnpj"));
		empresa.setV_nome(jsonObject.getString("v_nome"));
		empresa.setNumeroped_inicial(jsonObject.getLong("numeroped_inicial"));
		empresaDAO.update(empresa);// atualiza
		DadosSessao.setEmpresa(empresa);		
		empresaDAO.close();			
	}

	/**
	 * Atualiza produtos
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaProdutos(String url) throws Exception { 
		String produtosJSON = readJSON(url + "/produto/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);
		produtoDAO.open();
		JSONArray produtosItems = new JSONArray(produtosJSON);
		for (int i = 0; i < produtosItems.length(); i++) {
			Produto produto = JSONObjectToProduto(produtosItems.getJSONObject(i));
			if (produtoDAO.getById_produto_erp(produto.getId_produto_erp()) == null) {
				produtoDAO.insert(produto);// insere
			} else {
				produto.setId_produto(produtoDAO.getById_produto_erp(produto.getId_produto_erp()).getId_produto());
				produtoDAO.update(produto);// atualiza
			}
			at_produtos++;
		}
		produtoDAO.close();	
	}

	/**
	 * Atualiza precos dos produtos
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaPrecosProdutos(String url) throws Exception {
		String precosProdutosJSON = readJSON(url + "/produtopreco/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);		
		produtoPrecoDAO.open();
		JSONArray precosProdutosItems = new JSONArray(precosProdutosJSON);
		for (int i = 0; i < precosProdutosItems.length(); i++) {
			ProdutoPreco produtoPreco = JSONObjectToProdutoPreco(precosProdutosItems.getJSONObject(i));
			if (produtoPrecoDAO.getById_produto_preco_erp(produtoPreco.getId_produto_preco_erp()) == null) {
				produtoPrecoDAO.insert(produtoPreco);// insere
			} else {
				produtoPreco.setId_produto_preco(produtoPrecoDAO.getById_produto_preco_erp(produtoPreco.getId_produto_preco_erp()).getId_produto_preco());
				produtoPrecoDAO.update(produtoPreco);// atualiza
			}
			at_produtos_precos++;
		}
		produtoPrecoDAO.close();			
	}
	
	/**
	 * Atualiza estoque dos produtos
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaEstoqueProdutos(String url) throws Exception {
		String estoqueProdutosJSON = readJSON(url + "/produtoestoque/listar/" + id_empresa_erp + "/" + id_vendedor);		
		produtoEstoqueDAO.open();
		JSONArray estoqueProdutosItems = new JSONArray(estoqueProdutosJSON);
		for (int i = 0; i < estoqueProdutosItems.length(); i++) {
			ProdutoEstoque produtoEstoque = JSONObjectToProdutoEstoque(estoqueProdutosItems.getJSONObject(i));
			if (produtoEstoqueDAO.getById_produto(produtoEstoque.getId_produto()) == null) {
				produtoEstoqueDAO.insert(produtoEstoque);// insere
			} else {
				produtoEstoque.setId_produto_estoque(produtoEstoqueDAO.getById_produto(produtoEstoque.getId_produto()).getId_produto_estoque());
				produtoEstoqueDAO.update(produtoEstoque);// atualiza
			}			
		}
		produtoEstoqueDAO.close();			
	}

	/**
	 * Atualiza parceiros/clientes
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaClientes(String url) throws Exception {
		String clientesJSON = readJSON(url + "/cliente/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);
		clienteDAO.open();
		JSONArray clientesItems = new JSONArray(clientesJSON);
		for (int i = 0; i < clientesItems.length(); i++) {
			Cliente cliente = JSONObjectToCliente(clientesItems.getJSONObject(i));
			if (clienteDAO.getById_cliente_erp(cliente.getId_cliente_erp()) == null) {//Verifica se cliente ja existe
				clienteDAO.insert(cliente);// insere
			} else {
				cliente.setId_cliente(clienteDAO.getById_cliente_erp(cliente.getId_cliente_erp()).getId_cliente());//Pega o id
				clienteDAO.update(cliente);// atualiza
			}
			at_clientes++;
		}	
		clienteDAO.close();
	}
	
	/**
	 * Atualiza contas a receber/titulos em aberto
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaContaReceber(String url) throws Exception {
		String ctrJSON = readJSON(url + "/ctr/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);
		contaReceberDAO.open();
		JSONArray ctrItems = new JSONArray(ctrJSON);
		for (int i = 0; i < ctrItems.length(); i++) {
			ContaReceber contaReceber = JSONObjectToContaReceber(ctrItems.getJSONObject(i));
			if (contaReceberDAO.getById_ctr_erp(contaReceber.getId_ctr_erp()) == null) {//Verifica se ctr ja existe
				contaReceberDAO.insert(contaReceber);// insere
			} else {
				contaReceber.setId_ctr(contaReceberDAO.getById_ctr_erp(contaReceber.getId_ctr_erp()).getId_ctr());//Pega o id
				contaReceberDAO.update(contaReceber);// atualiza
			}
			at_clientes_ctr++;
		}	
		contaReceberDAO.close();
	}

	/**
	 * Atualiza formas de pagamentos
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaFormaPagamentos(String url) throws Exception {
		String produtosJSON = readJSON(url + "/formapagto/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);		
		formaPagamentoDAO.open();
		JSONArray formaPagamentoItems = new JSONArray(produtosJSON);
		for (int i = 0; i < formaPagamentoItems.length(); i++) {
			FormaPagamento formaPagamento = JSONObjectToFormaPagamento(formaPagamentoItems.getJSONObject(i));
			if (formaPagamentoDAO.getById_formapag_erp(formaPagamento.getId_formapag_erp()) == null) {
				formaPagamentoDAO.insert(formaPagamento);// insere
			} else {
				formaPagamento.setId_formapag(formaPagamentoDAO.getById_formapag_erp(formaPagamento.getId_formapag_erp()).getId_formapag());
				formaPagamentoDAO.update(formaPagamento);// atualiza
			}
			at_formapag++;
		}		
		formaPagamentoDAO.close();	
	}

	/**
	 * Atualiza prazos de pagamentos
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaPrazoPagamentos(String url) throws Exception {
		String produtosJSON = readJSON(url + "/prazopagto/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);				
		prazoPagamentoDAO.open();
		JSONArray prazoPagamentoItems = new JSONArray(produtosJSON);
		for (int i = 0; i < prazoPagamentoItems.length(); i++) {
			PrazoPagamento prazoPagamento = JSONObjectToPrazoPagamento(prazoPagamentoItems.getJSONObject(i));
			if (prazoPagamentoDAO.getById_prazopag_erp(prazoPagamento.getId_prazopag_erp()) == null) {
				prazoPagamentoDAO.insert(prazoPagamento);// insere
			} else {
				prazoPagamento.setId_prazopag(prazoPagamentoDAO.getById_prazopag_erp(prazoPagamento.getId_prazopag_erp()).getId_prazopag());
				prazoPagamentoDAO.update(prazoPagamento);// atualiza
			}
			at_prazopag++;
		}
		prazoPagamentoDAO.close();	
	}

	/**
	 * Verifica se algo foi excluido em alguma tabela
	 * E na tabela de pedidos verifica se foi excluido ou cancelado algum pedido
	 * 
	 * @param url
	 * @throws Exception
	 */
	public void atualizaRegistros(String url) throws Exception {
		String registrosJSON = readJSON(url + "/atualreg/listar/" + id_empresa_erp + "/" + id_vendedor + "/" + dataAtual);		
		JSONArray registrosItems = new JSONArray(registrosJSON);
		for (int i = 0; i < registrosItems.length(); i++) {
			AuditLog registro = JSONObjectToAtualizacaoRegistros(registrosItems.getJSONObject(i));
			if((registro.getAcao().equals("C") || registro.getAcao().equals("E")) && registro.getTabela().equals("pedidos")){//Se for processo de cancelamento ou exclusao de pedido
				pedidoDAO.open();
				Pedido pedido = pedidoDAO.getByNumero(registro.getId());// Busca pedido
				if(pedido != null){// Se pedido existir no fv
					pedido.setSituacao("C");// Passa pedido para C-Cancelado
					pedidoDAO.update(pedido);// Salva	
					at_pedidos_situacao++;
				}
				pedidoDAO.close();				
			}else if(registro.getAcao().equals("E")){//Se for processo de exclusao em outras tabelas
				genericDAO.open();
				genericDAO.delete(registro.getTabela(), registro.getId());//usa DAO generico para excluir
				genericDAO.close();
				at_registros++;
			}else if(registro.getAcao().equals("I")){//Processo de inativacao
				if(registro.getTabela().equals("produtos")){//Produtos
					produtoDAO.open();
					Produto produto = produtoDAO.getById_produto_erp(registro.getId());
					if(produto != null){
						produto.setAtivo(0);//Define como inativo
						produtoDAO.update(produto);//Atualiza/salva
						at_produtos++;
					}
					produtoDAO.close();					
				}else if(registro.getTabela().equals("formapag")){//Formas de recebimento
					formaPagamentoDAO.open();
					FormaPagamento formaPagamento = formaPagamentoDAO.getById_formapag_erp(registro.getId());
					if(formaPagamento != null){
						formaPagamento.setAtivo(0);//Define como inativo
						formaPagamentoDAO.update(formaPagamento);//Atualiza/salva
						at_formapag++;
					}
					formaPagamentoDAO.close();					
				}else if(registro.getTabela().equals("prazopag")){//Prazos de recebimento
					prazoPagamentoDAO.open();
					PrazoPagamento prazoPagamento = prazoPagamentoDAO.getById_prazopag_erp(registro.getId());
					if(prazoPagamento != null){
						prazoPagamento.setAtivo(0);//Define como inativo
						prazoPagamentoDAO.update(prazoPagamento);//Atualiza/salva
						at_prazopag++;
					}
					prazoPagamentoDAO.close();					
				}						
			}	
		}				
	}
	
	
	/**
	 * Converte uma lista de pedidos para uma lista de JSONObjects
	 * 
	 * @param pedidos
	 * @return List<Object>
	 * @throws JSONException
	 */
	@SuppressLint("SimpleDateFormat")
	public List<Object> pedidosToListJSONObject(List<Pedido> pedidos) throws JSONException {

		PedidoDAO pedidoDAO = new PedidoDAO(this);
		List<Object> objects = new ArrayList<Object>();
		
		pedidoDAO.open();
		for (Pedido pedido : pedidos) {
			JSONObject jsonObject = new JSONObject();// Cria novo objeto para armazenar o pedido
			jsonObject.put("id_pedido", pedido.getId_pedido());
			jsonObject.put("id_empresa", id_empresa_erp);
			jsonObject.put("numero", pedido.getNumero());
			jsonObject.put("situacao", pedido.getSituacao());
			jsonObject.put("id_cliente", pedido.getId_cliente());
			jsonObject.put("id_formapag", pedido.getId_formapag());
			jsonObject.put("id_prazopag", pedido.getId_prazopag());
			jsonObject.put("dtprevi_entrega", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz").format(pedido.getDtprevi_entrega())); // Formata data para o formato aceito pelo Gson
			jsonObject.put("tipo", pedido.getTipo());
			jsonObject.put("descp", pedido.getDescp());
			jsonObject.put("descv", pedido.getDescv());
			jsonObject.put("tot_ped", pedido.getTot_ped());
			jsonObject.put("obs", pedido.getObs());

			pedido.setItems(pedidoDAO.getItensByidPedido(pedido.getId_pedido().intValue()));// Busca itens do pedido
			JSONArray arrayItens = new JSONArray();// Cria JSONArray para armazenar os itens do pedido
			for (PedidoItem item : pedido.getItems()) {// Percorre os itens do pedido
				JSONObject jsonItem = new JSONObject(); // Cria novo objeto para armazenar o item
				jsonItem.put("id", item.getId_peditem());
				jsonItem.put("id_pedido", item.getId_pedido());
				jsonItem.put("id_produto", item.getId_produto());
				jsonItem.put("qtd", item.getQtd());
				jsonItem.put("vl_unitario", item.getVl_unitario());
				jsonItem.put("descp", item.getDescp());
				jsonItem.put("total", item.getTotal());

				arrayItens.put(jsonItem);// Coloca o objeto JSON dentro do array JSON
			}
			jsonObject.put("items", arrayItens);

			objects.add(jsonObject);			
		}
		pedidoDAO.close();

		return objects;
	}

	public Produto JSONObjectToProduto(JSONObject jsonObject) throws JSONException {
		Produto produto = new Produto();
		produto.setId_produto_erp(jsonObject.getLong("id_produto"));
		produto.setCodigo(jsonObject.getString("codigo"));
		produto.setId_empresa(id_empresa);
		produto.setAtivo(jsonObject.getBoolean("ativo") == true ? 1 : 0);
		produto.setDescricao(jsonObject.getString("descricao"));
		produto.setUnidade(jsonObject.getString("unidade"));
		produto.setQtdestoque(0.0);// vai ser em tabela separada
		produto.setPreco(0.0);// vai ser em tabela separada
		return produto;
	}

	public ProdutoPreco JSONObjectToProdutoPreco(JSONObject jsonObject) throws JSONException {
		ProdutoPreco produtoPreco = new ProdutoPreco();
		produtoPreco.setId_produto_preco_erp(jsonObject.getLong("id_produto_preco"));		
		produtoPreco.setId_empresa(id_empresa);
		produtoPreco.setId_produto(jsonObject.getInt("id_produto"));
		produtoPreco.setId_tipo_preco(jsonObject.getInt("id_tipo_preco"));
		produtoPreco.setDescricao_tipo_preco(jsonObject.getString("descricao_tipo_preco"));
		produtoPreco.setVl_preco(jsonObject.getDouble("vl_preco"));
		return produtoPreco;
	}
	
	public ProdutoEstoque JSONObjectToProdutoEstoque(JSONObject jsonObject) throws JSONException {
		ProdutoEstoque produtoEstoque = new ProdutoEstoque();		
		produtoEstoque.setId_produto_estoque_erp(jsonObject.getLong("id_produto_estoque"));
		produtoEstoque.setId_empresa(id_empresa);
		produtoEstoque.setId_produto(jsonObject.getInt("id_produto"));
		produtoEstoque.setQtd(jsonObject.getDouble("qtd"));		
		return produtoEstoque;
	}

	public Cliente JSONObjectToCliente(JSONObject jsonObject) throws JSONException {
		Cliente cliente = new Cliente();
		cliente.setId_cliente_erp(jsonObject.getLong("id_parceiro"));
		cliente.setId_empresa(id_empresa);
		cliente.setRazao(jsonObject.getString("razao"));
		cliente.setAtivo(jsonObject.getBoolean("ativo") == true ? 1 : 0);
		cliente.setNome(jsonObject.getString("nome"));
		cliente.setPesso(jsonObject.getInt("pesso"));
		cliente.setCgcpf(jsonObject.getString("cgcpf"));
		cliente.setDdd(jsonObject.getInt("ddd"));
		cliente.setTelef(jsonObject.getString("telef") != null ? jsonObject.getString("telef") : "");
		cliente.setE_mail(jsonObject.getString("e_mail"));
		cliente.setEndereco(jsonObject.getString("endereco"));
		cliente.setBairro(jsonObject.getString("bairro"));
		cliente.setMunicipio(jsonObject.getString("municipio"));
		cliente.setUf(jsonObject.getString("uf"));
		cliente.setCep(jsonObject.getString("cep"));
		cliente.setObs(jsonObject.getString("obs"));
		return cliente;
	}
	
	public ContaReceber JSONObjectToContaReceber(JSONObject jsonObject) throws JSONException {
		ContaReceber contaReceber = new ContaReceber();		
		contaReceber.setId_ctr_erp(jsonObject.getLong("id_ctr"));
		contaReceber.setId_empresa(id_empresa);
		contaReceber.setId_cliente(jsonObject.getInt("id_cliente"));
		contaReceber.setNumero(jsonObject.getString("numero"));
		contaReceber.setEmiss(DataUtils.getDateTimeBd(jsonObject.getString("emiss")));
		contaReceber.setVecto(DataUtils.getDateTimeBd(jsonObject.getString("vecto")));
		contaReceber.setSaldo(jsonObject.getDouble("saldo"));		
		return contaReceber;
	}

	public FormaPagamento JSONObjectToFormaPagamento(JSONObject jsonObject) throws JSONException {
		FormaPagamento formaPagamento = new FormaPagamento();
		formaPagamento.setId_formapag_erp(jsonObject.getLong("id_formapag"));
		formaPagamento.setId_empresa(id_empresa);
		formaPagamento.setAtivo(jsonObject.getBoolean("ativa") == true ? 1 : 0);
		formaPagamento.setDescricao(jsonObject.getString("descricao"));
		return formaPagamento;
	}

	public PrazoPagamento JSONObjectToPrazoPagamento(JSONObject jsonObject) throws JSONException {
		PrazoPagamento prazoPagamento = new PrazoPagamento();
		prazoPagamento.setId_prazopag_erp(jsonObject.getLong("id_prazopag"));
		prazoPagamento.setId_empresa(id_empresa);
		prazoPagamento.setAtivo(jsonObject.getBoolean("ativo") == true ? 1 : 0);
		prazoPagamento.setDescricao(jsonObject.getString("descricao"));
		return prazoPagamento;
	}

	public AuditLog JSONObjectToAtualizacaoRegistros(JSONObject jsonObject) throws JSONException {
		AuditLog registros = new AuditLog();
		registros.setId_auditlog(jsonObject.getLong("id_auditlog"));
		registros.setId(jsonObject.getInt("id"));
		registros.setTabela(jsonObject.getString("tabela"));
		registros.setAcao(jsonObject.getString("acao"));
		return registros;
	}
	
	/*
	 * //String serverURL =
	 * "http://androidexample.com/media/webservice/JsonReturn.php";
	 * 
	 * // Class with extends AsyncTask class private class LongOperation extends
	 * AsyncTask<String, Void, Void> {
	 * 
	 * // Required initialization private final HttpClient Client = new
	 * DefaultHttpClient(); private String Content; private String Error = null;
	 * private ProgressDialog Dialog = new
	 * ProgressDialog(FormSincronizacaoActivity.this); String data = "";
	 * TextView uiUpdate = (TextView) findViewById(R.id.output); TextView
	 * jsonParsed = (TextView) findViewById(R.id.jsonParsed); int sizeData = 0;
	 * //EditText serverText = (EditText) findViewById(R.id.serverText);
	 * 
	 * protected void onPreExecute() { // NOTE: You can call UI Element here. //
	 * Start Progress Dialog (Message)
	 * 
	 * Dialog.setMessage("Please wait.."); Dialog.show();
	 * 
	 * try { //data += "&" + URLEncoder.encode("data", "UTF-8") + "=" +
	 * serverText.getText();// Set Request parameter data += "&" +
	 * URLEncoder.encode("data", "UTF-8") + "=nada";// Set Request parameter }
	 * catch (UnsupportedEncodingException e) { e.printStackTrace(); }
	 * 
	 * }
	 * 
	 * // Call after onPreExecute method protected Void doInBackground(String...
	 * urls) {
	 * 
	 * //************ Make Post Call To Web Server *********** BufferedReader
	 * reader = null;
	 * 
	 * // Send data try {
	 * 
	 * // Defined URL where to send data URL url = new URL(urls[0]);
	 * 
	 * // Send POST data request
	 * 
	 * URLConnection conn = url.openConnection(); conn.setDoOutput(true);
	 * OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
	 * wr.write(data); wr.flush();
	 * 
	 * // Get the server response
	 * 
	 * reader = new BufferedReader(new
	 * InputStreamReader(conn.getInputStream())); StringBuilder sb = new
	 * StringBuilder(); String line = null;
	 * 
	 * // Read Server Response while ((line = reader.readLine()) != null) { //
	 * Append server response in string sb.append(line + "\n"); }
	 * 
	 * // Append Server Response To Content String Content = sb.toString(); }
	 * catch (Exception ex) { ex.printStackTrace(); Error = ex.getMessage(); }
	 * finally { try { reader.close(); }catch (Exception ex) {
	 * 
	 * } } return null; }
	 * 
	 * 
	 * 
	 * 
	 * protected void onPostExecute(Void unused) { // NOTE: You can call UI
	 * Element here.
	 * 
	 * // Close progress dialog Dialog.dismiss();
	 * 
	 * if (Error != null) { uiUpdate.setText("Output : " + Error); } else { //
	 * Show Response Json On Screen (activity) uiUpdate.setText(Content);
	 * 
	 * //****************** Start Parse Response JSON Data *************
	 * 
	 * String OutputData = ""; JSONObject jsonResponse;
	 * 
	 * try {
	 * 
	 * // Creates a new JSONObject with name/value mappings from the JSON
	 * string. jsonResponse = new JSONObject(Content);
	 * 
	 * // Returns the value mapped by name if it exists and is a JSONArray.
	 * 
	 * //******* Returns null otherwise. ******* //JSONArray jsonMainNode =
	 * jsonResponse.optJSONArray("Android"); JSONArray jsonMainNode =
	 * jsonResponse.optJSONArray("cliente");
	 * 
	 * //*********** Process each JSON Node ************
	 * 
	 * int lengthJsonArr = jsonMainNode.length();
	 * System.out.println("tamanho: "+lengthJsonArr);
	 * 
	 * for (int i = 0; i < lengthJsonArr; i++) { //****** Get Object for each
	 * JSON node. *********** JSONObject jsonChildNode =
	 * jsonMainNode.getJSONObject(i);
	 * 
	 * //******* Fetch node values **********
	 * 
	 * //String name = jsonChildNode.optString("name").toString(); //String
	 * number = jsonChildNode.optString("number").toString();
	 * 
	 * String name = jsonChildNode.optString("id").toString(); String number =
	 * jsonChildNode.optString("nome").toString(); //String date_added =
	 * jsonChildNode.optString("date_added").toString(); String date_added = "";
	 * 
	 * OutputData += " Name 		    : " + name + " \n " + "Number 		: " + number +
	 * " \n " + "Time 				: " + date_added + " \n "+
	 * "--------------------------------------------------\n";
	 * 
	 * // Log.i("JSON parse", song_name); } //****************** End Parse
	 * Response JSON Data *************
	 * 
	 * // Show Parsed Output on screen (activity)
	 * jsonParsed.setText(OutputData);
	 * 
	 * } catch (JSONException e) { e.printStackTrace(); } } } }
	 */

	/*
	 * Banco de ajuda
	 * //http://android.programmerguru.com/what-is-asynctask-in-android/
	 */

}